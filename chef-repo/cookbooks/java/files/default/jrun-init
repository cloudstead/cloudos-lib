#!/bin/bash
#
# jrun-init - an init-script wrapper for the jrun launcher
#
# Usage:
#
#   jrun-init <app-base-dir> <run-as-user> [java-class] [config-file] [start|stop|restart|status]
#
# app-base-dir (and if defined, java-class and config-file) are passed to the jrun script, which documents
# their usage.
#
# The start command launches the Java server via jrun. See the jrun script for more details.
# The output of the stop and status commands includes the pid of the Java server process.
# The restart command does a stop and start with a 2 second pause in between.
#
# To create a system daemon using the regular conventions (see jrun), create a script
# in /etc/init.d like this example:
#
#    #!/bin/bash
#
#    APP_BASE="/home/web/acmecorp-cool-app"
#    RUN_AS_USER="acme"
#
#    exec /usr/local/bin/jrun-init "${APP_BASE}" "${RUN_AS_USER}" "$@"
#
# To create a system daemon using a custom java class and optional config-file (see jrun), create a script
# in /etc/init.d like this example:
#
#    #!/bin/bash
#
#    APP_BASE="/home/web/acmecorp-cool-app"
#    RUN_AS_USER="acme"
#    JAVA_CLASS="acmecorp.MyService"
#    CONFIG="/etc/something.conf"
#
#    exec /usr/local/bin/jrun-init "${APP_BASE}" "${RUN_AS_USER}" ${JAVA_CLASS} ${CONFIG} "$@"
#
#

umask 007

function die () {
  if [[ ! -z "${CONTROL_LOG}" && -f "${CONTROL_LOG}" ]] ; then
    echo "${1}" >> ${CONTROL_LOG}
  fi
  echo >&2 "${1}"
  exit 1
}

if [ $(whoami) != "root" ] ; then
  die "Not root."
fi

APP_BASE="$1"
if [ -z ${APP_BASE} ] ; then
  die "No APP_BASE given"
fi
shift

RUN_AS_USER="$1"
if [ -z ${RUN_AS_USER} ] ; then
  die "No RUN_AS_USER given"
fi
shift

# these are optional -- if present, it means run this class with this specific config
JAVA_CLASS="$1"  # If present, it must contain at least one dot, so we don't mistake it for the init command
CONFIG="$2"      # If present, it must contain at least one forward slash, so we don't mistake it for the init command

APP=$(basename ${APP_BASE})
APP_NAME="${APP}"
APP_PARENT=$(echo $APP | tr '-' ' ' | awk '{print $1}')
APP_ROLE=$(echo $APP | tr '-' ' ' | awk '{print $2}')

LOG_DIR=${APP_BASE}/logs
mkdir -p ${LOG_DIR}
CONTROL_LOG=${LOG_DIR}/control_${APP}

PROC_SIG=""
if [[ "${JAVA_CLASS}" =~ .+\..+ ]] ; then
  PROC_SIG="-cp .+${APP}-.+\.jar ${JAVA_CLASS}"
  SIMPLE_CLASS=$(echo ${JAVA_CLASS} | awk -F '.' '{print $NF}') # com.package.SomeService becomes SomeService
  APP_NAME="${APP_NAME}-${SIMPLE_CLASS}"
  CONTROL_LOG="${CONTROL_LOG}-${SIMPLE_CLASS}"
  shift
  if [[ "${CONFIG}" =~ .+/.+ ]] ; then
    PROC_SIG="${PROC_SIG} ${CONFIG}"
    LOG_NAME="$(echo $(basename ${CONFIG}) | awk -F '.' '{print $1}')"  # /path/to/service-name.yml becomes service-name
    APP_NAME="${APP_NAME}-${LOG_NAME}"
    CONTROL_LOG="${CONTROL_LOG}-${LOG_NAME}"
    shift
  else
    CONFIG=""  # blank it out, otherwise it contains the init command
  fi
else
  PROC_SIG="-jar .+${APP}-.+\.jar"
  JAVA_CLASS=""  # blank it out, otherwise it contains the init command
fi
CONTROL_LOG="${CONTROL_LOG}.log"

#
# is_running: determine if a the Java server process is running
#
# This function echos the pid(s) to stdout, and returns the number of processes found.
#
# Because callers can depend on both the output and the return value, do not "echo" anything else here.
# If you're debugging, write to a logfile somewhere.
#
function is_running () {
    PROC_SIG="$@"
    PIDS=$(ps auxwwww | egrep -- "${PROC_SIG}" | grep -v egrep | awk '{print $2}' | tr -d ' ')
    if [ -z "${PIDS}" ] ; then
      return 0
    fi
    echo "${PIDS}"
    num_pids=$(echo $PIDS | wc -l | tr -d ' ')
    if [ $num_pids -gt 1 ] ; then
        return 2
    fi
    return 1
}

case "$1" in
  start)
    is_running "${PROC_SIG}"
    if [ $? -ge 1 ] ; then
      echo "$(date): start: ${APP} server already running (proc pattern=${PROC_SIG}), NOT starting" | tee -a ${CONTROL_LOG}
      exit 0
    fi

    RUN_AS_USER_HOME=$(echo $(bash -c "cd ~${RUN_AS_USER} && pwd"))
    if [ -f "${APP_BASE}/jrun_prestart.sh" ] ; then
        echo "Running prestart script: ${APP_BASE}/jrun_prestart.sh" | tee -a ${CONTROL_LOG}
        bash -c ${APP_BASE}/jrun_prestart.sh 2>&1 | tee -a ${CONTROL_LOG}
        rval=$?
        if [ ${rval} -ne 0 ] ; then
            if [ -f ${APP_BASE}/.jrun_prestart_ignore_errors ] ; then
                echo "Error running jrun_prestart (exited with status=${rval} but continuing anyway)" | tee -a ${CONTROL_LOG}
            else
                die "Error running jrun_prestart"
            fi
        fi
    fi
    echo "$(date): start: starting ${APP_NAME} as ${RUN_AS_USER}, setting HOME=${RUN_AS_USER_HOME}, was ${HOME}" | tee -a ${CONTROL_LOG}

    set -m
    sudo -u ${RUN_AS_USER} -H bash -c "HOME=${RUN_AS_USER_HOME} /usr/local/bin/jrun ${APP_BASE} ${JAVA_CLASS} ${CONFIG} 2> /dev/null 1> /dev/null </dev/null &"
    exit $?
  ;;

  stop)
    pid=$(is_running "${PROC_SIG}")
    if [ $? -eq 0 ] ; then
      echo "$(date): stop: ${APP_NAME} server not running" | tee -a ${CONTROL_LOG}
    else
      echo "$(date): stop: stopping ${APP_NAME} server (pid=${pid})..." | tee -a ${CONTROL_LOG}
      kill ${pid}
      start=$(date +%s)
      stop_timeout=30
      while [ $(expr $(date +%s) - ${start}) -lt ${stop_timeout} ] ; do
        is_running "${PROC_SIG}"
        if [ $? -eq 0 ] ; then
          echo "$(date): stop: ${APP_NAME} server stopped" | tee -a ${CONTROL_LOG}
          exit 0
        else
          echo "$(date): stop: ${APP_NAME} still running, waiting (will timeout in $(expr ${stop_timeout} - $(expr $(date +%s) - ${start}))  seconds)" | tee -a ${CONTROL_LOG}
          sleep 2s
        fi
      done
      echo "$(date): stop: timeout: ${APP_NAME} server did not stop, killing it" | tee -a ${CONTROL_LOG}
      kill -9 ${pid}
      exit 2
    fi
  ;;

  status)
    pid=$(is_running "${PROC_SIG}")
    if [ $? -ge 1 ] ; then
      echo "$(date): status: ${APP_NAME} is running (pid ${pid})" | tee -a ${CONTROL_LOG}
    else
      echo "$(date): status: ${APP_NAME} is NOT running" | tee -a ${CONTROL_LOG}
    fi
  ;;

  restart)
    $0 ${APP_BASE} ${RUN_AS_USER} ${JAVA_CLASS} ${CONFIG} stop
    $0 ${APP_BASE} ${RUN_AS_USER} ${JAVA_CLASS} ${CONFIG} start
  ;;

  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
  ;;
esac

exit 0
