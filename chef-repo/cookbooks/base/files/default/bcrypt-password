#!/usr/bin/perl
#
# Usage: echo 'password' | bcrypt-password [rounds]
#
# If rounds is omitted, default value is 8
#

use Crypt::Eksblowfish::Bcrypt;
use Crypt::Random;

$rounds = 8;
if (defined @ARGV[0]) {
    $rounds = @ARGV[0];
}

$password = <STDIN>;
$encrypted = encrypt_password($password, $rounds);
print "$encrypted";

# Encrypt a password                                                                                                                                                              
sub encrypt_password {
    my $password = shift;
    my $rounds = shift;
    my $rounds_string = ($rounds < 10) ? "0$rounds" : "$rounds";

    # Generate a salt if one is not passed                                                                                                                                        
    my $salt = shift || salt();

    # Set the cost to 8 and append a NUL                                                                                                                                          
    my $settings = '$2a$' . $rounds_string . '$'.$salt;

    # Encrypt it                                                                                                                                                                  
    return Crypt::Eksblowfish::Bcrypt::bcrypt($password, $settings);
}


# Return a random salt                                                                                                                                                            
sub salt {
    return Crypt::Eksblowfish::Bcrypt::en_base64(Crypt::Random::makerandom_octet(Length=>16));
}
